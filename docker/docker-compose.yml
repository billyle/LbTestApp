version: '3.8'

services:
  # Spring Boot 应用
  spring-boot-app:
    build: 
      context: ..
      dockerfile: docker/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
    #  - redis
    #  - zookeeper
    #  - rocketmq
    #  - kafka
      - mysql
    #  - mongodb
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/lb_test_app_db
      - SPRING_DATASOURCE_USERNAME=${MYSQL_USER}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
    #  - SPRING_DATA_MONGODB_URI=mongodb://mongodb/lb_test_app_db
    #  - SPRING_REDIS_HOST=redis
    #  - SPRING_ZOOKEEPER_HOST=zookeeper
    #  - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    #  - SPRING_ROCKETMQ_BROKER_ADDRESS=rocketmq:9876
    networks:
      - mysql

  # MySQL
  mysql:
    image: "mysql:5.7"
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      # 可选：设置 MySQL 时区
      TZ: Asia/Shanghai
    volumes:
      # 持久化 MySQL 数据
      - mysql_data:/var/lib/mysql
      # 挂载初始化脚本到容器内，并重命名为容器期望的初始化脚本名
      - ../mysql/sql/init_mysql.sql:/docker-entrypoint-initdb.d/init_script.sql
    networks:
      - mysql

  # Redis
  #redis:
  #  image: "redis:alpine"
  #  ports:
  #    - "6379:6379"

  # Zookeeper
  # zookeeper:
  #  image: "confluentinc/cp-zookeeper:latest"
  #  environment:
  #    ZOOKEEPER_CLIENT_PORT: 2181

  # RocketMQ
  # rocketmq:
  #  image: "apache/rocketmq:4.9.4"
  #  ports:
  #    - "9876:9876"
  #    - "10909:10909"
  #    - "10911:10911"

  # Kafka
  # kafka:
  #  image: "confluentinc/cp-kafka:latest"
  #  ports:
  #    - "9092:9092"
  #  environment:
  #    KAFKA_BROKER_ID: 1
  #    KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
  #    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # MongoDB
  #mongodb:
  #  image: "mongo:4.4"
  #  ports:
  #    - "27017:27017"

volumes:
  mysql_data:  # 定义持久化卷
networks:
  mysql:    # 定义一个网络，让服务可以互通